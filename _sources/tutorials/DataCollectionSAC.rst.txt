
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/DataCollectionSAC.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_DataCollectionSAC.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_DataCollectionSAC.py:


SAC Database
============

In this Tutorial we are going to get all good receiver functions for the year
2018 for station IU-HRV ([Adam Dziewonski
Observatory](http://www.seismology.harvard.edu/hrv.html)).

To Compute the receiver function we need to download and organize the observed
data. PyGLImER will automatically take care of these things for you in the
background, but do check out the 'Database Docs' if you aren't familiar.

Downloading Event & Station Metadata
------------------------------------

To download the data we use the :class:`pyglimer.waveform.request.Request`
class. The first method from this class that we are going to use is the
download event catalog public method
:func:`pyglimer.waveform.request.Request.download_evtcat`, to get a set
of events that contains all wanted earthquakes. This method is launched
automatically upon initialization.

To initialize said `class` we setup a parameter dictionary, with all the needed
information. Let's look at the expected information:

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 1
    # sphinx_gallery_dummy_images = 1








.. GENERATED FROM PYTHON SOURCE LINES 32-33

First let's get a path where to create the data.

.. GENERATED FROM PYTHON SOURCE LINES 33-80

.. code-block:: default



    # Some needed Imports
    import os
    from obspy import UTCDateTime
    from pyglimer.waveform.request import Request

    # Get notebook path for future reference of the database:
    try: db_base_path = ipynb_path
    except NameError:
        try: db_base_path = os.path.dirname(os.path.realpath(__file__))
        except NameError: db_base_path = os.getcwd()


    # Define file locations
    proj_dir = os.path.join(db_base_path, 'tmp', 'database_sac')



    request_dict = {
        # Necessary arguments
        'proj_dir': proj_dir,
        'raw_subdir': os.path.join('waveforms', 'raw'),# Directory of the waveforms
        'prepro_subdir': os.path.join('waveforms', 'preprocessed'),  # Directory of the preprocessed waveforms
        'rf_subdir': os.path.join('waveforms', 'RF'),  # Directory of the receiver functions
        'statloc_subdir': 'stations', # Directory stations
        'evt_subdir': 'events',       # Directory of the events
        'log_subdir': 'log',          # Directory for the logs
        'loglvl': 'WARNING',          # logging level
        'format': 'sac',              # Format to save database in
        "phase": "P",                 # 'P' or 'S' receiver functions
        "rot": "RTZ",                 # Coordinate system to rotate to
        "deconmeth": "waterlevel",    # Deconvolution method
        "starttime": UTCDateTime(2021, 1, 1, 0, 0, 0), # Starttime of database.
                                                    # Here, starttime of HRV
        "endtime": UTCDateTime(2021, 7, 1, 0, 0, 0), # Endtimetime of database
        # kwargs below
        "pol": 'v',                   # Source wavelet polaristion. Def. "v" --> SV
        "minmag": 5.5,                # Earthquake minimum magnitude. Def. 5.5
        "event_coords": None,         # Specific event?. Def. None
        "network": "IU",              # Restricts networks. Def. None
        "station": "HRV",             # Restricts stations. Def. None
        "waveform_client": ["IRIS"],  # FDSN server client (s. obspy). Def. None
        "evtcat": None,               # If you have already downloaded a set of
                                      # events previously, you can use them here
    }








.. GENERATED FROM PYTHON SOURCE LINES 81-83

Now that all parameters are in place, let's initialize the 
:class:`pyglimer.waveform.request.Request`

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: default


    # Initializing the Request class and downloading the data
    R = Request(**request_dict)








.. GENERATED FROM PYTHON SOURCE LINES 88-90

The initialization will look for all events for which data is available. To see 
whether the events make sense we plot a map of the events:

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: default


    import matplotlib.pyplot as plt
    from pyglimer.plot.plot_utils import plot_catalog
    from pyglimer.plot.plot_utils import set_mpl_params

    # Setting plotting parameters
    set_mpl_params()

    # Plotting the catalog
    plot_catalog(R.evtcat)




.. image-sg:: /tutorials/images/sphx_glr_DataCollectionSAC_001.png
   :alt: DataCollectionSAC
   :srcset: /tutorials/images/sphx_glr_DataCollectionSAC_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-103

We can also quickly check how many events we gathered.

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: default


    print(f"There are {len(R.evtcat)} available events")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    There are 289 available events




.. GENERATED FROM PYTHON SOURCE LINES 107-128

Downloading waveform data and station information
-------------------------------------------------

The next step on our journey to receiver functions is retrieving
the corresponding waveform data.
To retrieve the waveform data, we can two different public methods
of `Request`: `download_waveforms()` or, as in this case `download_waveforms_small_db()`.

Both methods use the station and event locations to get viable
records of receiver function depending on epicentral distance and
traveltimes.

`download_waveforms()` relies on obspy's massdownloader and is best suited for
extremely large databases (i.e., from many different networks and stations).
`download_waveforms_small_db()` is faster for downloads from few stations and, additionally,
has the advantage that the desired networks and stations can be defined as lists and not only
as strings. Note that this method requires you to define the channels, you'd like to download
(as a string, wildcards allowed).

***NOTE:*** This might take a while.


.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: default


    R.download_waveforms_small_db(channel='BH?')








.. GENERATED FROM PYTHON SOURCE LINES 132-133

Let's have a quick look at how many miniseeds we actually downloaded.

.. GENERATED FROM PYTHON SOURCE LINES 133-143

.. code-block:: default


    from glob import glob

    # Path to the where the miniseeds are stored
    data_storage = os.path.join(
        proj_dir, 'waveforms','raw','P','**', '*.mseed')

    # Print output
    print(f"Number of downloaded waveforms: {len(glob(data_storage))}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of downloaded waveforms: 71




.. GENERATED FROM PYTHON SOURCE LINES 144-171

The final step to get you receiver function data is the preprocessing. 
Although it is hidden in a single function, which
is :func:`pyglimer.waveform.request.Request.preprocess`
A lot of decisions are being made:

Processing steps:
1. Clips waveform to the right length (tz before and ta after theorethical 
arrival.)
2. Demean & Detrend
3. Tapering
4. Remove Instrument response, convert to velocity &
simulate havard station
5. Rotation to NEZ and, subsequently, to RTZ.
6. Compute SNR for highpass filtered waveforms (highpass f defined in 
qc.lowco) If SNR lower than in qc.SNR_criteria for all filters, rejects 
waveform.
7. Write finished and filtered waveforms to folder
specified in qc.outputloc.
8. Write info file with shelf containing station,
event and waveform information.
9. (Optional) If we had chosen a different coordinate system in ``rot``
than RTZ, it would now cast the preprocessed waveforms information
that very coordinate system.
10. Deconvolution with method ``deconmeth`` from our dict is perfomed.

It again uses the request class to perform this. The ``if __name__ ...``
expression is needed for running this examples

.. GENERATED FROM PYTHON SOURCE LINES 171-174

.. code-block:: default


    R.preprocess(hc_filt=1.5, client='single')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  5.89it/s]    100%|##########| 3/3 [00:00<00:00, 17.59it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.32it/s]    100%|##########| 3/3 [00:00<00:00, 10.50it/s]    100%|##########| 3/3 [00:00<00:00,  9.84it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5433.04it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6598.28it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6808.94it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 12.78it/s]    100%|##########| 3/3 [00:00<00:00, 19.11it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.97it/s]    100%|##########| 3/3 [00:00<00:00, 20.81it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00,  7.40it/s]    100%|##########| 3/3 [00:00<00:00,  7.22it/s]    100%|##########| 3/3 [00:00<00:00,  7.25it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.85it/s]    100%|##########| 3/3 [00:00<00:00, 10.36it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.53it/s]    100%|##########| 3/3 [00:00<00:00, 20.21it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.67it/s]    100%|##########| 3/3 [00:00<00:00, 20.42it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6043.67it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6364.65it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.99it/s]    100%|##########| 3/3 [00:00<00:00, 20.90it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.83it/s]     67%|######6   | 2/3 [00:00<00:00,  6.65it/s]    100%|##########| 3/3 [00:00<00:00,  9.99it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 14.10it/s]    100%|##########| 3/3 [00:00<00:00, 21.07it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.89it/s]    100%|##########| 3/3 [00:00<00:00, 10.95it/s]    100%|##########| 3/3 [00:00<00:00, 10.33it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.63it/s]    100%|##########| 3/3 [00:00<00:00, 10.25it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 4896.07it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00,  7.53it/s]    100%|##########| 3/3 [00:00<00:00, 11.27it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.88it/s]    100%|##########| 3/3 [00:00<00:00, 20.74it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.08it/s]    100%|##########| 3/3 [00:00<00:00, 10.14it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 4815.50it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.83it/s]    100%|##########| 3/3 [00:00<00:00, 20.39it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5893.64it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.73it/s]    100%|##########| 3/3 [00:00<00:00, 20.52it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 21.05it/s]    100%|##########| 3/3 [00:00<00:00, 21.01it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5437.73it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.63it/s]     67%|######6   | 2/3 [00:00<00:00,  6.79it/s]    100%|##########| 3/3 [00:00<00:00,  6.84it/s]    100%|##########| 3/3 [00:00<00:00,  6.80it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.71it/s]    100%|##########| 3/3 [00:00<00:00, 20.49it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5637.51it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.84it/s]    100%|##########| 3/3 [00:00<00:00, 20.41it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5604.86it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6509.53it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6397.01it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.84it/s]    100%|##########| 3/3 [00:00<00:00, 10.59it/s]    100%|##########| 3/3 [00:00<00:00, 10.03it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00,  7.34it/s]    100%|##########| 3/3 [00:00<00:00, 10.99it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5313.73it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 20.78it/s]    100%|##########| 3/3 [00:00<00:00, 20.74it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 19.70it/s]    100%|##########| 3/3 [00:00<00:00, 19.66it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.71it/s]    100%|##########| 3/3 [00:00<00:00, 20.04it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.74it/s]    100%|##########| 3/3 [00:00<00:00, 10.39it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.93it/s]    100%|##########| 3/3 [00:00<00:00, 20.82it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5774.63it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.82it/s]    100%|##########| 3/3 [00:00<00:00, 20.37it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5650.16it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6516.27it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6750.49it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6728.83it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6102.29it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6587.91it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6710.89it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6765.01it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6746.87it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6721.64it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6685.93it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6526.41it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6743.25it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6449.47it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6682.37it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6872.15it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6849.71it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.76it/s]     67%|######6   | 2/3 [00:00<00:00,  6.90it/s]    100%|##########| 3/3 [00:00<00:00, 10.30it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5774.63it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.99it/s]     67%|######6   | 2/3 [00:00<00:00,  6.96it/s]    100%|##########| 3/3 [00:00<00:00, 10.43it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 20.96it/s]    100%|##########| 3/3 [00:00<00:00, 20.91it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5275.85it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.90it/s]    100%|##########| 3/3 [00:00<00:00, 20.59it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  3.74it/s]    100%|##########| 3/3 [00:00<00:00, 11.18it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 20.37it/s]    100%|##########| 3/3 [00:00<00:00, 20.33it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5144.28it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 20.77it/s]    100%|##########| 3/3 [00:00<00:00, 20.73it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.97it/s]    100%|##########| 3/3 [00:00<00:00, 20.82it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5667.98it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6332.62it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6615.62it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5693.63it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6226.08it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6129.04it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 12.61it/s]    100%|##########| 3/3 [00:00<00:00, 18.85it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5809.29it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 20.94it/s]    100%|##########| 3/3 [00:00<00:00, 20.90it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5280.28it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.47it/s]    100%|##########| 3/3 [00:00<00:00, 10.74it/s]    100%|##########| 3/3 [00:00<00:00, 10.06it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.99it/s]    100%|##########| 3/3 [00:00<00:00, 20.86it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.80it/s]    100%|##########| 3/3 [00:00<00:00, 20.31it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 5386.52it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.85it/s]     67%|######6   | 2/3 [00:00<00:00,  6.90it/s]    100%|##########| 3/3 [00:00<00:00,  6.05it/s]    100%|##########| 3/3 [00:00<00:00,  6.25it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  3.64it/s]     67%|######6   | 2/3 [00:00<00:00,  5.04it/s]    100%|##########| 3/3 [00:00<00:00,  5.74it/s]    100%|##########| 3/3 [00:00<00:00,  5.30it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.79it/s]    100%|##########| 3/3 [00:00<00:00, 20.27it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 12.15it/s]    100%|##########| 3/3 [00:00<00:00,  9.63it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.89it/s]     67%|######6   | 2/3 [00:00<00:00,  6.89it/s]    100%|##########| 3/3 [00:00<00:00, 10.32it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 13.83it/s]    100%|##########| 3/3 [00:00<00:00, 20.66it/s]
      0%|          | 0/3 [00:00<?, ?it/s]     33%|###3      | 1/3 [00:00<00:00,  6.41it/s]    100%|##########| 3/3 [00:00<00:00, 19.16it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6198.48it/s]
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 6257.04it/s]
      0%|          | 0/1 [00:00<?, ?it/s]    100%|##########| 1/1 [00:00<00:00,  6.93it/s]    100%|##########| 1/1 [00:00<00:00,  6.92it/s]




.. GENERATED FROM PYTHON SOURCE LINES 175-192

First Receiver functions
------------------------

The following few section show how to plot 

1. Single raw RFs
2. A set of raw RFs
3. A move-out corrected RF
4. A set of move-out corrected RFs


Read the IU-HRV receiver functions as a Receiver function stream
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Let's read a receiver function set and see what it's all about! 
(i.e. let's look at what data a Receiver function trace contains
and how we can use it!)

.. GENERATED FROM PYTHON SOURCE LINES 192-200

.. code-block:: default


    from pyglimer.rf.create import read_rf

    path_to_rf = os.path.join(proj_dir, 'waveforms','RF','P','IU','HRV','*.sac')
    rfstream = read_rf(path_to_rf)

    print(f"Number of RFs: {len(rfstream)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of RFs: 7




.. GENERATED FROM PYTHON SOURCE LINES 201-202

PyGLImER is based on Obspy, but to handle RFs we need some more attributes: 

.. GENERATED FROM PYTHON SOURCE LINES 202-209

.. code-block:: default


    from pprint import pprint

    rftrace = rfstream[0]
    pprint(rftrace.stats)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Stats({'sampling_rate': 10.0, 'delta': 0.1, 'starttime': UTCDateTime(2021, 1, 10, 4, 4, 10, 294538), 'endtime': UTCDateTime(2021, 1, 10, 4, 6, 40, 194538), 'npts': 1500, 'calib': 1.0, 'network': 'IU', 'station': 'HRV', 'location': '10', 'channel': 'PRF', 'sac': AttribDict({'delta': 0.1, 'depmin': -0.50730354, 'depmax': 0.62682194, 'scale': 1.0, 'b': 0.000538, 'e': 149.90054, 'o': -595.811, 'a': 30.00007, 'stla': 42.5064, 'stlo': -71.5583, 'stel': 200.0, 'evla': -24.0412, 'evlo': -66.5729, 'evdp': 217000.0, 'mag': 6.1, 'user1': 6.337349, 'baz': 175.01988, 'gcarc': 66.419815, 'depmen': 2.4325653e-08, 'nzyear': 2021, 'nzjday': 10, 'nzhour': 4, 'nzmin': 4, 'nzsec': 10, 'nzmsec': 294, 'nvhdr': 6, 'npts': 1500, 'iftype': 1, 'iztype': 9, 'leven': 1, 'lpspol': 1, 'lovrok': 1, 'lcalda': 0, 'kstnm': 'HRV', 'khole': '10', 'kuser0': 'time', 'kuser1': 'P', 'kcmpnm': 'PRF', 'knetwk': 'IU'}), '_format': 'SAC', 'station_latitude': 42.5064, 'station_longitude': -71.5583, 'station_elevation': 200.0, 'event_latitude': -24.0412, 'event_longitude': -66.5729, 'event_depth': 217000.0, 'event_magnitude': 6.1, 'event_time': UTCDateTime(2021, 1, 10, 3, 54, 14, 483026), 'onset': UTCDateTime(2021, 1, 10, 4, 4, 40, 294071), 'type': 'time', 'phase': 'P', 'distance': 66.419815, 'back_azimuth': 175.01988, 'slowness': 6.337349})




.. GENERATED FROM PYTHON SOURCE LINES 210-226

First Receiver function plots
-----------------------------

If the Receiver functions haven't been further processed,
they are plotted as a function of time. A single receiver
function in the stream will be plotted as function of time
only. A full stream can make use of the distance measure saved
in the sac-header and plot an entire section as a function of
time and epicentral distance.

Plot single RF
++++++++++++++

Below we show how to plot the receiver function
as a function of time, and the clean option, which plots
the receiver function without any axes or text.

.. GENERATED FROM PYTHON SOURCE LINES 226-232

.. code-block:: default


    from pyglimer.plot.plot_utils import set_mpl_params

    # Plot RF
    rftrace.plot()




.. image-sg:: /tutorials/images/sphx_glr_DataCollectionSAC_002.png
   :alt: DataCollectionSAC
   :srcset: /tutorials/images/sphx_glr_DataCollectionSAC_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot:xlabel='Conversion Time [s]', ylabel='A    '>



.. GENERATED FROM PYTHON SOURCE LINES 233-234

Let's zoom into the first 20 seconds (~200km)

.. GENERATED FROM PYTHON SOURCE LINES 234-237

.. code-block:: default


    rftrace.plot(lim=[0,20])




.. image-sg:: /tutorials/images/sphx_glr_DataCollectionSAC_003.png
   :alt: DataCollectionSAC
   :srcset: /tutorials/images/sphx_glr_DataCollectionSAC_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot:xlabel='Conversion Time [s]', ylabel='A    '>



.. GENERATED FROM PYTHON SOURCE LINES 238-243

Plot RF section
+++++++++++++++

Since we have an entire stream of receiver functions at hand,
we can plot a section

.. GENERATED FROM PYTHON SOURCE LINES 243-246

.. code-block:: default


    rfstream.plot(scalingfactor=1)




.. image-sg:: /tutorials/images/sphx_glr_DataCollectionSAC_004.png
   :alt: PRF component
   :srcset: /tutorials/images/sphx_glr_DataCollectionSAC_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot:title={'center':'PRF component'}, xlabel='$\\Delta$ [$^{\\circ}$]', ylabel='Time [s]'>



.. GENERATED FROM PYTHON SOURCE LINES 247-249

Similar to the single RF plot we can provide time and 
epicentral distance limits:

.. GENERATED FROM PYTHON SOURCE LINES 249-256

.. code-block:: default


    timelimits = (0, 20)  # seconds  
    epilimits = (32, 36)  # epicentral distance
    rfstream.plot(
        scalingfactor=0.25, lim=timelimits, epilimits=epilimits,
        linewidth=0.75)




.. image-sg:: /tutorials/images/sphx_glr_DataCollectionSAC_005.png
   :alt: PRF component
   :srcset: /tutorials/images/sphx_glr_DataCollectionSAC_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot:title={'center':'PRF component'}, xlabel='$\\Delta$ [$^{\\circ}$]', ylabel='Time [s]'>



.. GENERATED FROM PYTHON SOURCE LINES 257-259

By increasing the scaling factor and removing the plotted lines, we can
already see trends:

.. GENERATED FROM PYTHON SOURCE LINES 259-265

.. code-block:: default


    rfstream.plot(
        scalingfactor=0.5, lim=timelimits, epilimits=epilimits, 
        line=False)





.. image-sg:: /tutorials/images/sphx_glr_DataCollectionSAC_006.png
   :alt: PRF component
   :srcset: /tutorials/images/sphx_glr_DataCollectionSAC_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot:title={'center':'PRF component'}, xlabel='$\\Delta$ [$^{\\circ}$]', ylabel='Time [s]'>



.. GENERATED FROM PYTHON SOURCE LINES 266-267

As simple as that you can create your own receiver functions with 
just a single smalle script.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.582 seconds)


.. _sphx_glr_download_tutorials_DataCollectionSAC.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: DataCollectionSAC.py <DataCollectionSAC.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: DataCollectionSAC.ipynb <DataCollectionSAC.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
